{"version":3,"file":"network.799ac7b7.js","sources":["../../src/views/test/network.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <div class=\"charts-row\">\r\n        <div class=\"chart-container\">\r\n          <h2>群成员分布拓扑</h2>\r\n          <div class=\"chart\" ref=\"networkChart\" id=\"no1\"></div>\r\n        </div>\r\n        <div class=\"chart-container\" id=\"no2\">\r\n          <h2>接收消息时间线</h2>\r\n          <div class=\"chart\" ref=\"timelineChart\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"table-row\">\r\n        <h2>追责操作日志表</h2>\r\n        <TableCustom\r\n          :columns=\"logColumns\"\r\n          :tableData=\"pagedLogs\"\r\n          :total=\"logPage.total\"\r\n          :page-size=\"logPage.size\"\r\n          :current-page=\"logPage.index\"\r\n          @page-change=\"changeLogPage\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </template>\r\n<script setup lang=\"ts\">\r\nimport { ref, reactive, computed, onMounted } from 'vue';\r\nimport * as echarts from 'echarts';\r\nimport TableCustom from '@/components/table-custom.vue';\r\n\r\n// 网络拓扑图配置\r\nconst networkChart = ref<HTMLElement>();\r\nconst networkData = reactive({\r\n  nodes: [] as any[],\r\n  links: [] as any[],\r\n  groupCircles: [] as any[]\r\n});\r\n\r\n// 定义群组及其节点\r\nconst groups = [\r\n  { name: 'Group1', nodes: ['PC1', 'PC2', 'PC3'] },\r\n  { name: 'Group2', nodes: ['PC4', 'PC5', 'PC6'] },\r\n  { name: 'Group3', nodes: ['PC7', 'PC8', 'PC9', 'PC10'] }\r\n];\r\n\r\n// 设置每个群组的圆心和半径\r\nconst groupCenters = [\r\n  { x: 200, y: 200, r: 80 },\r\n  { x: 600, y: 200, r: 80 },\r\n  { x: 400, y: 400, r: 100 }\r\n];\r\n\r\n// 生成节点和链接数据\r\ngroups.forEach((group, index) => {\r\n  const center = groupCenters[index];\r\n  \r\n  // 添加群组圆圈节点\r\n  networkData.groupCircles.push({\r\n    id: `group-${index}`,\r\n    name: group.name,\r\n    x: center.x,\r\n    y: center.y,\r\n    r: center.r,\r\n    category: index\r\n  });\r\n  \r\n  // 生成群组内的PC节点\r\n  const angleStep = (2 * Math.PI) / group.nodes.length;\r\n  group.nodes.forEach((nodeId, i) => {\r\n    const angle = i * angleStep;\r\n    const x = center.x + center.r * 0.7 * Math.cos(angle);\r\n    const y = center.y + center.r * 0.7 * Math.sin(angle);\r\n    \r\n    networkData.nodes.push({\r\n      id: nodeId,\r\n      name: nodeId,\r\n      category: index,\r\n      x,\r\n      y,\r\n      symbolSize: 20,\r\n      itemStyle: {\r\n        color: getNodeColor(index)\r\n      }\r\n    });\r\n    \r\n    // 添加从PC节点到群组圆心的链接\r\n    networkData.links.push({\r\n      source: nodeId,\r\n      target: `group-${index}`,\r\n      lineStyle: {\r\n        width: 1,\r\n        curveness: 0.2,\r\n        opacity: 0.5\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n// 辅助函数：根据群组索引返回颜色\r\nfunction getNodeColor(groupIndex: number): string {\r\n  const colors = ['#5470c6', '#91cc75', '#fac858'];\r\n  return colors[groupIndex % colors.length];\r\n}\r\n\r\n// 时间线图配置（保持不变）\r\nconst timelineChart = ref<HTMLElement>();\r\nconst timelineData = reactive({\r\n  xAxis: ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'],\r\n  series: [\r\n    { name: 'Group1', data: [120, 132, 101, 134, 90, 230, 210, 180] },\r\n    { name: 'Group2', data: [220, 182, 191, 234, 290, 330, 310, 280] },\r\n    { name: 'Group3', data: [150, 232, 201, 154, 190, 330, 410, 380] },\r\n  ]\r\n});\r\n\r\n// 日志表格配置（保持不变）\r\nconst logColumns = ref([\r\n  { prop: 'timestamp', label: '时间戳' },\r\n  { prop: 'operator', label: '操作者ID' },\r\n  { prop: 'action', label: '操作类型' },\r\n  { prop: 'target', label: '目标群/节点' },\r\n  { prop: 'status', label: '结果状态' },\r\n  { prop: 'remark', label: '备注' },\r\n]);\r\n\r\nconst allLogs = ref([\r\n  { timestamp: '2023-01-01 10:00', operator: 'admin', action: '删除', target: 'Group1', status: '成功', remark: '清理过期数据' },\r\n  { timestamp: '2023-01-01 11:30', operator: 'user1', action: '修改', target: 'PC2', status: '失败', remark: '权限不足' },\r\n  { timestamp: '2023-01-02 09:15', operator: 'admin', action: '添加', target: 'Group3', status: '成功', remark: '新增测试节点' },\r\n  { timestamp: '2023-01-02 14:45', operator: 'user2', action: '连接', target: 'PC4-PC5', status: '成功', remark: '节点通信建立' },\r\n  { timestamp: '2023-01-03 08:20', operator: 'admin', action: '删除', target: 'PC6', status: '失败', remark: '节点正在使用中' },\r\n  { timestamp: '2023-01-03 16:10', operator: 'user3', action: '修改', target: 'Group2', status: '成功', remark: '更新策略规则' },\r\n  { timestamp: '2023-01-04 12:00', operator: 'user1', action: '扫描', target: 'Group3', status: '成功', remark: '定期检查' },\r\n  { timestamp: '2023-01-04 18:25', operator: 'admin', action: '断开', target: 'PC9', status: '成功', remark: '隔离异常节点' },\r\n  { timestamp: '2023-01-05 09:00', operator: 'user2', action: '添加', target: 'PC10', status: '失败', remark: '参数配置错误' },\r\n  { timestamp: '2023-01-05 17:40', operator: 'admin', action: '恢复', target: 'PC6', status: '成功', remark: '节点恢复上线' },\r\n]);\r\n\r\nconst logPage = reactive({\r\n  index: 1,\r\n  size: 4,\r\n  get total() {\r\n    return allLogs.value.length;\r\n  }\r\n});\r\n\r\nconst changeLogPage = (val: number) => {\r\n  logPage.index = val;\r\n};\r\n\r\nconst pagedLogs = computed(() => {\r\n  const start = (logPage.index - 1) * logPage.size;\r\n  return allLogs.value.slice(start, start + logPage.size);\r\n});\r\n\r\n// 初始化图表\r\nonMounted(() => {\r\n  if (networkChart.value) {\r\n    const chart = echarts.init(networkChart.value);\r\n    chart.setOption({\r\n      tooltip: {},\r\n      legend: {\r\n        data: groups.map(g => g.name)\r\n      },\r\n      series: [{\r\n        type: 'graph',\r\n        layout: 'none',\r\n        data: [\r\n          ...networkData.nodes,\r\n          ...networkData.groupCircles.map(circle => ({\r\n            ...circle,\r\n            symbol: 'circle',\r\n            symbolSize: circle.r * 2,\r\n            itemStyle: {\r\n              color: 'transparent',\r\n              borderColor: getNodeColor(circle.category),\r\n              borderWidth: 2\r\n            },\r\n            label: {\r\n              show: true,\r\n              position: 'center',\r\n              formatter: circle.name,\r\n              color: '#333',\r\n              fontSize: 14\r\n            }\r\n          }))\r\n        ],\r\n        links: networkData.links,\r\n        categories: groups.map(g => ({ name: g.name })),\r\n        roam: true,\r\n        label: {\r\n          show: true,\r\n          position: 'right',\r\n          formatter: (params: any) => {\r\n            return params.data.id.startsWith('group-') ? '' : params.data.name;\r\n          }\r\n        },\r\n        emphasis: {\r\n          focus: 'adjacency',\r\n          label: { show: true }\r\n        },\r\n        lineStyle: {\r\n          opacity: 0.9,\r\n          width: 1,\r\n          curveness: 0\r\n        }\r\n      }]\r\n    });\r\n  }\r\n\r\n  // 时间线图初始化保持不变\r\n  if (timelineChart.value) {\r\n    const chart = echarts.init(timelineChart.value);\r\n    chart.setOption({\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'cross',\r\n          label: { backgroundColor: '#6a7985' }\r\n        }\r\n      },\r\n      legend: {\r\n        data: timelineData.series.map(item => item.name)\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        boundaryGap: false,\r\n        data: timelineData.xAxis\r\n      },\r\n      yAxis: { type: 'value' },\r\n      series: timelineData.series.map(item => ({\r\n        name: item.name,\r\n        type: 'line',\r\n        stack: 'Total',\r\n        areaStyle: {},\r\n        emphasis: { focus: 'series' },\r\n        data: item.data\r\n      }))\r\n    });\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  padding: 0px;\r\n  background-color: transparent;\r\n  border: 0;\r\n  width: 100%;\r\n}\r\n.content{\r\n    padding: 0;\r\n}\r\n.charts-row {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n.chart-container{\r\n    margin-top: 10px;\r\n}\r\n.chart-container,\r\n.table-row {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  padding-left: 0px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n  width: 100%;\r\n}\r\n\r\n.chart-container {\r\n  flex: 1;\r\n  min-width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.chart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n#no2{\r\n    padding-right: 0;\r\n}\r\nh2 {\r\n  margin-bottom: 12px;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: #333;\r\n  text-align: center;\r\n}\r\n\r\n.table-row {\r\n  margin-top: 20px;\r\n  width: 99%;\r\n}\r\n</style>\r\n"],"names":["networkChart","ref","networkData","reactive","groups","groupCenters","group","index","center","angleStep","nodeId","i","angle","x","y","getNodeColor","groupIndex","colors","timelineChart","timelineData","logColumns","allLogs","logPage","changeLogPage","val","pagedLogs","computed","start","onMounted","echarts.init","g","circle","params","item"],"mappings":"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"}